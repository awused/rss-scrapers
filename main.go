package main

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gorilla/feeds"
)

const listURL = "https://www.webnovel.com/apiajax/chapter/GetChapterList?_csrfToken=&bookId="
const bookURL = "https://www.webnovel.com/book/"
const chapterURLFormat = "https://www.webnovel.com/book/%s/%s"

// Generated by https://mholt.github.io/json-to-go/
type responseBody struct {
	Code int `json:"code"`
	Data struct {
		BookInfo struct {
			BookID          string `json:"bookId"`
			BookName        string `json:"bookName"`
			BookSubName     string `json:"bookSubName"`
			TotalChapterNum int    `json:"totalChapterNum"`
			NewChapterID    string `json:"newChapterId"`
			NewChapterName  string `json:"newChapterName"`
			NewChapterTime  string `json:"newChapterTime"`
			NewChapterIndex int    `json:"newChapterIndex"`
		} `json:"bookInfo"`
		VolumeItems []struct {
			Name         string `json:"name"`
			Index        int    `json:"index"`
			ChapterCount int    `json:"chapterCount"`
			ChapterItems []struct {
				ID         string `json:"id"`
				Name       string `json:"name"`
				Index      int    `json:"index"`
				IsVip      int    `json:"isVip"`
				CreateTime string `json:"createTime"`
				IsAuth     int    `json:"isAuth"`
			} `json:"chapterItems"`
		} `json:"volumeItems"`
	} `json:"data"`
	Msg string `json:"msg"`
}

func main() {
	if len(os.Args) < 3 {
		log.Fatal("Specify bookid and limit")
	}

	bookid := os.Args[1]
	limit, err := strconv.Atoi(os.Args[2])
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	if limit <= 0 {
		log.Println("Limit must be greater than 0")
		os.Exit(1)
	}

	url := listURL + bookid

	resp, err := http.Get(url)
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}
	body, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	var b responseBody
	err = json.Unmarshal(body, &b)
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	feed := &feeds.Rss{&feeds.Feed{
		Title:       b.Data.BookInfo.BookName,
		Link:        &feeds.Link{Href: bookURL + bookid},
		Description: b.Data.BookInfo.BookName + " - Webnovel",
	}}

	now := time.Now()

VolumeLoop:
	for vk, _ := range b.Data.VolumeItems {
		v := b.Data.VolumeItems[len(b.Data.VolumeItems)-1-vk]
		for ck, _ := range v.ChapterItems {
			if len(feed.Items) >= limit {
				break VolumeLoop
			}

			c := v.ChapterItems[len(v.ChapterItems)-1-ck]

			if c.IsVip != 0 {
				continue
			}

			feed.Items = append(feed.Items, &feeds.Item{
				Title:   fmt.Sprintf("Chapter %d - %s", c.Index, c.Name),
				Id:      c.ID,
				Link:    &feeds.Link{Href: fmt.Sprintf(chapterURLFormat, bookid, c.ID)},
				Created: now,
			})
		}
	}

	rssFeed := feed.RssFeed()
	rssFeed.Ttl = 60

	feedXml, err := xml.Marshal(rssFeed.FeedXml())
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	fmt.Print(string(feedXml))
}
